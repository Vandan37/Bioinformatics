import matplotlib.pyplot as plt
import numpy as np

def main():
    # random dataset
    np.random.seed(0)  ### random r
    chromosome_position = np.arange(0, 60, 0.1)  # Chromosome positions
    top_values = np.random.rand(len(chromosome_position)) * 100  # Values for the top graph
    bottom_values = np.random.rand(len(chromosome_position)) * 200  # Values for the bottom graph

    fig, axs = plt.subplots(2, 1, figsize=(10, 6), sharex=True, gridspec_kw={'height_ratios': [1, 1], 'hspace': 0.05})

    # Top subplot (Red)
    axs[0].bar(chromosome_position, top_values, width=0.2, color='red')
    axs[0].axhline(y=100, color='black', linestyle='dashed')  # Threshold line
    axs[0].set_title('Rht-B1') # Title for the top subplot
    axs[0].set_ylim(0, max(top_values) * 1.1)  # Dynamic limit based on the data
    axs[0].set_ylabel('xP-CLR')  # y-axis label for the top subplot

    # Bottom subplot (Blue)
    # Plotting positive values, inverting the y-axis
    # I can use the "multiplying by -1", but it'd mean there needs to be additional steps for converting
    # Instead it's easy to invert
    axs[1].bar(chromosome_position, bottom_values, width=0.2, color='blue')  # Negative values are represented as positive bars
    axs[1].axhline(y=150, color='black', linestyle='dashed')  # Positive threshold line for the bottom graph
    axs[1].set_xlabel('Chromosome 4B (Mb)')
    axs[1].set_ylim(max(bottom_values) * 1.1, 0)  # Invert the y-axis
    axs[1].set_ylabel('xP-CLR')  # y-axis label bottom subplot

    plt.show()

main()
