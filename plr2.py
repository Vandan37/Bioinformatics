# -*- coding: utf-8 -*-
"""PLR2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_gPDoHrYWhxdIEUkg4YHWnMUFo_U6NFp
"""

import pandas as pd

# Load the .xlsx file from the specified sheet with multi-level headers
file_path = 'path/to/lS_LR_FHB_AGR_PM.xlsx'  # Adjust to where the file is located on your Linux system
df = pd.read_excel(file_path, sheet_name="FHB", header=[0, 1, 2], engine='openpyxl')

# Fetch the 'Entry#' data
entry_column = [col for col in df.columns if 'Entry#' in col[0]][0]
entry_data = df[entry_column].values.tolist()

# Get user input
input_year = input("Enter the Year (e.g. '2016'): ")
input_location = input("Enter the Location (e.g. 'MDN'): ")
input_repeat = input("Enter the Repeat value (e.g. 'Rep 1'): ")

# Build possible level-1 headers, add all probable values that are found on the headers
possible_headers = [input_year + "_" + input_location + "_FHB",
                    input_year + "_" + input_location + "_AGR(FHB)"]

# Try finding the 'Incidence' or 'INC¹' column for each possible header
# This can be replaced with the names of Columns that are intended
incident_col = None
for header in possible_headers:
    possible_columns = [(header, input_repeat, 'Incidence'),
                        (header, input_repeat, 'INC¹')]
    for col in possible_columns:
        if col in df.columns:
            incident_col = col
            break
    if incident_col:
        break

# If not found, look for 'Anthesis' and then the column after it
# Certain column groups don't have Incidence or INC1 as the first column. hence we look at the next index
# Index kept as 1 for this code, can be changed, or can be generalized
if not incident_col:
    for header in possible_headers:
        try:
            anthesis_col_index = df.columns.get_loc((header, input_repeat, 'Anthesis'))
            incident_col = df.columns[anthesis_col_index + 1]  # Get the next column
            break
        except:
            pass

# The values get added to a list, concatenated with the data from Entry#
if incident_col:
    incidence_data = df[incident_col].values.tolist()
    # Display the data based on user input
    print("\nEntry, Year, Location, Disease, Repeat, Type, Value")
    for entry, incidence in zip(entry_data, incidence_data):
        if pd.isna(entry):
            entry_str = "NA"
        else:
            entry_str = str(int(entry)) if entry % 1 == 0 else str(entry)

        # Convert incidence to string and replace non-numeric values with 'NA'
        # Converted to string so decimals and integers can be displayed as is
        if pd.isna(incidence):
            incidence_str = "NA"
        else:
            if isinstance(incidence, float) and incidence.is_integer():
                incidence_str = str(int(incidence))
            else:
                incidence_str = str(incidence)
        # Printed with tabs
        print(f"{entry_str} {input_year}  {input_location}  FHB {input_repeat}  {incident_col[2]} {incidence_str}")
# Error module to show if the columns are not found
else:
    print("Neither 'Incidence' nor 'INC¹' columns found for the given inputs.")


if __name__ == "__main__":
    main()